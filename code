#include <opencv2/opencv.hpp>
#include <iostream>
#include <string>
using namespace std;
using namespace cv;

int main(int argc, char* argv[])
{
	int a;
	char m[20],n[20];
	cout << "请输入图片1路径：" << endl;
	cin.getline(m, 20);
	Mat img1 = imread(m,0);//获取图1
    if (img1.empty())
	{
		cout << "error";
		return -1;
	}
	cout << "请输入图片2路径：" << endl;
	cin.getline(n, 20);
	Mat img2 = imread(n,0);//获取图2
	if (img2.empty())
	{
		cout << "error";
		return -1;
	}
	imwrite("F://原图1.bmp", img1);
	imwrite("F://原图2.bmp", img2);
	cout << "请输入运算方式（1for'+'，2for'-'，3for'*'，4for'/')：" << endl;
	cin >> a;//选择运算方式
	if (a != 1 && a != 2 && a != 3 && a != 4)
	{
		cout << "请重新输入运算方式（1for'+'，2for'-'，3for'*'，4for'/')：" << endl;
		cin >> a;//若不为1,2,3,4，重新选择运算方式
	}
	if (a == 1)//加法
	{
		Mat img3(img1.rows, img1.cols, CV_16UC1);
		Mat img4(img1.rows, img1.cols, CV_8UC1);
		for(int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
			{

				img3.at<short>(i, j) = img1.at<uchar>(i, j) +img2.at<uchar>(i,j);
			}
		}
		double pixel_max, pixel_min;
		minMaxLoc(img3, &pixel_min, &pixel_max);
		for (int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
			{

				img4.at<uchar>(i, j) = 255*(img3.at<short>(i,j)-pixel_min)/(pixel_max-pixel_min);
			}
		}
		imwrite("F://2-4-1.bmp", img4);
		imshow("2-4", img4);
		waitKey();
		return 0;
	}
	else if (a == 2)//减法
	{
		Mat img3(img1.rows, img1.cols, CV_16SC1);
		Mat img4(img1.rows, img1.cols, CV_8UC1);
		for (int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
			{

				img3.at<short>(i, j) = img1.at<uchar>(i, j) - img2.at<uchar>(i, j);
			}
		}
		double pixel_max, pixel_min;
		minMaxLoc(img3, &pixel_min, &pixel_max);
		for (int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
			{

				img4.at<uchar>(i, j) = 255*(img3.at<short>(i, j) - pixel_min) / (pixel_max - pixel_min);
			}
		}
		imwrite("F://2-4-2.bmp", img4);
		imshow("2-4", img4);
		waitKey();
		return 0;
	}
	else if (a == 3)//乘法
	{
		Mat img3(img1.rows, img1.cols, CV_16UC1);
		Mat img4(img1.rows, img1.cols, CV_8UC1);
		for (int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
			{

				img3.at<short>(i, j) = img1.at<uchar>(i, j) * img2.at<uchar>(i, j);
			}
		}
		double pixel_max, pixel_min;
		minMaxLoc(img3, &pixel_min, &pixel_max);
		for (int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
			{

				img4.at<uchar>(i, j) = 255*(img3.at<short>(i, j) - pixel_min) / (pixel_max - pixel_min);
			}
		}
		imwrite("F://2-4-3.bmp", img4);
		imshow("2-4", img4);
		waitKey();
		return 0;
	}
	else if (a == 4)//除法
	{
		Mat img3(img1.rows, img1.cols, CV_16UC1);
		Mat img4(img1.rows, img1.cols, CV_8UC1);
		for (int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
			{

				img3.at<short>(i, j) = 100*img1.at<uchar>(i, j) / img2.at<uchar>(i, j);
			}
		 }
		double pixel_max, pixel_min;
		minMaxLoc(img3, &pixel_min, &pixel_max);
		for (int i = 0; i < img1.rows; i++)
		{
			for (int j = 0; j < img1.cols; j++)
		{
				img4.at<uchar>(i, j) = 255*(img3.at<short>(i, j)-pixel_min)/ (pixel_max - pixel_min);
				
			}
		}
		imwrite("F://2-4-4.bmp", img4);
		imshow("2-4", img4);
		waitKey();
		return 0;
	}
	else
		return -1;
}
